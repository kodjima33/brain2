generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "mongodb"
  url       = env("DATABASE_URL")
  directUrl = env("MONGO_URL")
}

// No model for a user since auth is handled by Clerk
// Assume we get a unique userId for each user 
// TODO: for messenger we neeed a mapping from users to their PSID(page scoped ID)

model Preferences {
  id        String         @id @map("_id")
  resources UserResource[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Represents a URL resource that a user configured
// We may scrape these resources for content
type UserResource {
  url         String
  title       String
  description String
  active      Boolean @default(true)
}

// Represents a single audio recording
model AudioBlob {
  id            String  @id @map("_id")
  transcription String?
  owner         String // userId

  noteId String @unique
  note   Note   @relation(fields: [noteId], references: [id])

  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([owner])
}

// Represents a synthesized digest of audio recording(s)
// This can either be a single note or a digest over a collection of notes
model Note {
  id    String @id @map("_id")
  owner String //userId

  // Deprecated
  title   String?
  content String?

  // Current active revision
  activeRevisionId String?       @unique
  activeRevision   NoteRevision? @relation(name: "activeRevision", fields: [activeRevisionId], references: [id])

  revisions NoteRevision[] @relation(name: "noteRevisions")

  digestSpan NoteDigestSpan
  recording  AudioBlob?

  children Note[] @relation("noteDigest", fields: [childrenIds], references: [id])
  parents  Note[] @relation("noteDigest", fields: [parentIds], references: [id])

  conversation ChatConversation?

  childrenIds String[]
  parentIds   String[]

  digestStartDate DateTime @default(now())
  active          Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model NoteRevision {
  id     String @id @map("_id")
  noteId String
  note   Note   @relation(name: "noteRevisions", fields: [noteId], references: [id], onUpdate: NoAction)

  activeNote Note? @relation(name: "activeRevision")

  title   String
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Represents the span of a note digest
// e.g. if a note represents a digest over an entire day's notes
enum NoteDigestSpan {
  SINGLE
  DAY
  WEEK
}

enum MessageAuthor {
  USER
  BRAIN2
}

type ChatMessage {
  author MessageAuthor
  text   String
}

model ChatConversation {
  id        String @id @map("_id")
  ownerPSID String //Using FB's PSID here for now. TODO: does this need to change after auth is complete?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)

  messages ChatMessage[]

  noteId String? @unique
  note   Note?   @relation(fields: [noteId], references: [id])
}

// Mapping of clerk userIDs to messenger's page scoped IDs (PSID)
model MessengerUser {
  userId        String @id @map("_id")
  messengerPsid String @unique
}
